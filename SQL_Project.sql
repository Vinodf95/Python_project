/* List all unique cities where customer are located.*/
SELECT DISTINCT
    customer_city
FROM
    customers
ORDER BY customer_city;

/*Count number of order placed in 2017*/

SELECT 
    COUNT(*) AS total_orders_2017
FROM
    orders
WHERE
    YEAR(order_purchase_timestamp) = 2017;
    
/*Find Total Sales Per Category*/

SELECT 
    COUNT(*)
FROM
    order_items;
SELECT 
    COUNT(*)
FROM
    products;

SELECT 
    p.product_category, SUM(oi.price) AS total_sales
FROM
    order_items oi
        LEFT JOIN
    products p ON oi.product_id = p.product_id
GROUP BY p.product_category
ORDER BY total_sales DESC;

/*Calculate the percentage of orders that were paid in installments*/

SELECT 
    (COUNT(CASE
        WHEN
            payment_type = 'credit_card'
                AND payment_installments > 1
        THEN
            order_id
    END) * 100.0 / COUNT(order_id)) AS installment_percentage
FROM
    payments;

/*Count the number of customer from each state*/

SELECT 
    customer_state, COUNT(customer_id) AS customer_count
FROM
    customers
GROUP BY customer_state
ORDER BY customer_count DESC;

/*Calculate the number of orders per month in 2018*/

SELECT 
    DATE_FORMAT(order_purchase_timestamp, '%Y-%m') AS order_month,
    COUNT(order_id) AS total_orders
FROM
    orders
WHERE
    YEAR(order_purchase_timestamp) = 2018
GROUP BY order_month
ORDER BY order_month;

/*Find the average number of products per order grouped by customer city*/

SELECT 
    o.order_id,
    o.customer_id,
    COUNT(oi.product_id) AS order_item_count
FROM
    orders o
        JOIN
    order_items oi ON o.order_id = oi.order_id
GROUP BY o.order_id , o.customer_id;



SELECT 
    c.customer_city,
    AVG(order_item_count) AS avg_products_per_order
FROM
    (SELECT 
        o.order_id,
            o.customer_id,
            COUNT(oi.product_id) AS order_item_count
    FROM
        orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    GROUP BY o.order_id , o.customer_id) AS order_counts
        JOIN
    customers c ON c.customer_id = order_counts.customer_id
GROUP BY c.customer_city
ORDER BY avg_products_per_order DESC;

/*Calculate the Percentage of total revenue contributed by each product category*/

SELECT 
    p.product_category AS category,
    SUM(oi.price) AS total_revenue,
    (SUM(oi.price) * 100.0 / (SELECT 
            SUM(price)
        FROM
            order_items)) AS revenue_percentage
FROM
    order_items oi
        JOIN
    products p ON oi.product_id = p.product_id
GROUP BY p.product_category
ORDER BY revenue_percentage DESC;

/*Identify the correlation between product price and the number of times  product has been purchased*/

SELECT 
    p.product_id,
    p.product_category,
    AVG(oi.price) AS avg_price,
    COUNT(oi.order_id) AS purchase_count
FROM
    order_items oi
        JOIN
    products p ON oi.product_id = p.product_id
GROUP BY p.product_id , p.product_category
ORDER BY avg_price DESC;

/*Calculate the total revenue generated by each seller, and rank them by revenue*/

SELECT 
    s.seller_id, 
    s.seller_city,
    SUM(oi.price) AS total_revenue,
    RANK() OVER (ORDER BY SUM(oi.price) DESC) AS revenue_rank
FROM order_items oi
JOIN sellers s ON oi.seller_id = s.seller_id
GROUP BY s.seller_id, s.seller_city
ORDER BY total_revenue DESC;


/*Calculate the moving average of order value for each customer over their order history*/

WITH OrderValues AS (
    SELECT 
        o.customer_id, 
        o.order_id, 
        SUM(oi.price) AS order_value,
        o.order_purchase_timestamp
    FROM orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    GROUP BY o.customer_id, o.order_id, o.order_purchase_timestamp
),
MovingAvg AS (
    SELECT 
        customer_id,
        order_id,
        order_value,
        order_purchase_timestamp,
        AVG(order_value) OVER (
            PARTITION BY customer_id 
            ORDER BY order_purchase_timestamp 
            ROWS BETWEEN 2 PRECEDING AND CURRENT ROW
        ) AS moving_avg_3_orders
    FROM OrderValues
)
SELECT * FROM MovingAvg;

/*Calculate the cumulative sales per month of each year */

SELECT 
    YEAR(o.order_purchase_timestamp) AS order_year,
    MONTH(o.order_purchase_timestamp) AS order_month,
    SUM(oi.price) AS monthly_sales
FROM
    orders o
        JOIN
    order_items oi ON o.order_id = oi.order_id
GROUP BY order_year , order_month;


WITH MonthlySales AS (
    SELECT 
        YEAR(o.order_purchase_timestamp) AS order_year,
        MONTH(o.order_purchase_timestamp) AS order_month,
        SUM(oi.price) AS monthly_sales
    FROM orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    GROUP BY order_year, order_month
)
SELECT 
    order_year,
    order_month,
    monthly_sales,
    SUM(monthly_sales) OVER (
        PARTITION BY order_year 
        ORDER BY order_month 
        ROWS BETWEEN UNBOUNDED PRECEDING AND CURRENT ROW
    ) AS cumulative_sales
FROM MonthlySales
ORDER BY order_year, order_month;

/* Calculate the year-over-year growth rate of total sales*/

WITH YearlySales AS (
    SELECT 
        YEAR(o.order_purchase_timestamp) AS order_year,
        SUM(oi.price) AS total_sales
    FROM orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    GROUP BY order_year
),
SalesGrowth AS (
    SELECT 
        order_year,
        total_sales,
        LAG(total_sales) OVER (ORDER BY order_year) AS prev_year_sales,
        ((total_sales - LAG(total_sales) OVER (ORDER BY order_year)) / 
            LAG(total_sales) OVER (ORDER BY order_year)) * 100 AS yoy_growth
    FROM YearlySales
)
SELECT * FROM SalesGrowth
ORDER BY order_year;

/* Calculate the retention rate of customer,defined as the percentage of customer who make another purchase within 6 months of their first purchase*/

SELECT customer_id, COUNT(order_id) AS order_count 
FROM orders 
GROUP BY customer_id 
HAVING order_count > 1
ORDER BY order_count DESC;



WITH FirstPurchase AS (
    SELECT 
        customer_id, 
        MIN(order_purchase_timestamp) AS first_purchase_date
    FROM orders
    GROUP BY customer_id
),
RepeatCustomers AS (
    SELECT DISTINCT o.customer_id
    FROM orders o
    JOIN FirstPurchase fp ON o.customer_id = fp.customer_id
    WHERE o.order_purchase_timestamp > fp.first_purchase_date 
          AND o.order_purchase_timestamp <= DATE_ADD(fp.first_purchase_date, INTERVAL 6 MONTH)
)
SELECT 
    (COUNT(DISTINCT r.customer_id) * 100.0 / COUNT(DISTINCT f.customer_id)) AS retention_rate
FROM FirstPurchase f
LEFT JOIN RepeatCustomers r ON f.customer_id = r.customer_id;

/* Identify the top 3 customer who spent the most money in each year*/

WITH CustomerYearlySpending AS (
    SELECT 
        YEAR(o.order_purchase_timestamp) AS order_year,
        o.customer_id,
        SUM(oi.price) AS total_spent
    FROM orders o
    JOIN order_items oi ON o.order_id = oi.order_id
    GROUP BY order_year, o.customer_id
),
RankedCustomers AS (
    SELECT 
        order_year,
        customer_id,
        total_spent,
        RANK() OVER (PARTITION BY order_year ORDER BY total_spent DESC) AS customer_rank
    FROM CustomerYearlySpending
)
SELECT order_year, customer_id, total_spent
FROM RankedCustomers
WHERE customer_rank <= 3
ORDER BY order_year, customer_rank;


